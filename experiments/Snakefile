configfile: 'config.yaml'

from glob import glob
from os.path import basename
from math import ceil

BENCHMARK_UNITS = ["runtimes", "memory"]

def getGenomeSeq(wcs):
	if wcs.sp == "arabidopsis":
		return "%s/genomeSequences/%s.fas" %(wcs.sp, wcs.acc)
	else:
		return "%s/genomeSequences/%s.fasta" %(wcs.sp, wcs.acc)

def getAccessionNames(sp):
	accNames = []

	for l in open(glob("%s/genomeSequences/*.txt" %sp)[0], 'r'):
		splittedAccName = basename(l.strip()).split('.')

		if len(splittedAccName) > 1:
			accNames.append('.'.join(splittedAccName[:-1]))
		else:
			accNames.append(splittedAccName[0])

	return accNames

def getCoreSizeFiles(wcs):
	specs = config['prokaryotes']
	accs = {s: getAccessionNames(s) for s in specs}

	return ["%s/coreSizes/coreSize_assemblyGraph_k17_m%s.txt" %(s, ceil(config['relQrm'] * len(accs[s]))) for s in specs]

def getCorerBenchmarks(wcs):
	specs = config['prokaryotes']
	accs = {s: getAccessionNames(s) for s in specs}

	return ["%s/benchmarks/benchmark_assemblyGraph_k17_Core_m%d_d60.txt" %(s, ceil(config['relQrm'] * len(accs[s]))) for s in specs]

def getBifrostResultFiles(wcs):
	specs = config['prokaryotes']
	accs = {s: getAccessionNames(s) for s in specs}
	
	return ["%s/bifrostRes/qRes_assemblyGraph_k17_Core_m%s_d60_t%s_q%s.tsv" %(s, ceil(float(wcs.relQrm) * len(accs[s])), config['geneCovThres'], a) for s in specs for a in accs[s]]

def getArabidopsisBifrostResultFiles(wcs):
	return ["arabidopsis/bifrostRes/qRes_assemblyGraph_k21_Core_m18_d60_t0.5_q%s.tsv" %q for q in getAccessionNames("arabidopsis")]

def getAssemblyGraphBifrostResultFiles(wcs):
	return ["arabidopsis/bifrostRes/qRes_assemblyGraphWotSf_k21_Core_m17_d60_t0.5_q%s.tsv" %q for q in getAccessionNames("arabidopsis") if q.find("sf") < 0]

def getReadGraphBifrostResultFiles(wcs):
	return ["arabidopsis/bifrostRes/qRes_readGraph_k21_Core_m17_d60_t0.5_q%s.tsv" %q for q in getAccessionNames("arabidopsis") if q.find("sf") < 0]

def getGeneCovs(wcs):
	specs = config['prokaryotes']
	specs.remove("listeriaMonocytogenes")
	accs = {s: getAccessionNames(s) for s in specs}

	return ["%s/geneCoverages/coverage_assemblyGraph_m%s_q%s.txt" %(s, ceil(float(wcs.relQrm) * len(accs[s])), a) for s in specs for a in accs[s]]

def getArabidopsisGeneCovs(wcs):
	return ["arabidopsis/geneCoverages/coverage_assemblyGraph_m18_q%s.txt" %q for q in getAccessionNames("arabidopsis")]

def getGffFiles(sp):
	return ["%s/annotations/%s.gff" %(sp, a) for a in getAccessionNames(sp)]

def getAssemblies(wcs):
	if wcs.sp == "arabidopsis":
		gList = ["%s/genomeSequences/%s.fas" %(wcs.sp, a) for a in getAccessionNames(wcs.sp)]
	else:
		gList = ["%s/genomeSequences/%s.fasta" %(wcs.sp, a) for a in getAccessionNames(wcs.sp)]

	if wcs.gtype.find("wotSf") > -1:
		gList.remove("arabidopsis/genomeSequences/sf_2.v7.PR_in_lowercase.fas")

	return gList

def listGenomes(sp):
	return ["%s/genomeSequences/%s.fasta" %(sp, a.strip()) for a in open("%s/genomeSequences/accessions.txt" %sp, 'r')]

def getReadSets(acc):
	return ["arabidopsis/reads/" + basename(f) for l in open("arabidopsis/reads/filereport_read_run_PRJEB2457_tsv.txt", 'r') if l.find(str(acc).capitalize()) > -1 for f in l.split('\t')[6].split(';')]

def getBuscoResultFiles(wcs):
	return ["arabidopsis/buscoAnalysis/run_BUSCO_%s/full_table_BUSCO_%s.tsv" %(a, a) for a in getAccessionNames("arabidopsis")]

rule all:
	input:
		"tables/toolComparison_qrm%.2f_t%.1f.tsv" %(config['relQrm'], config['geneCovThres']),
		expand("figures/{t}VarDatasets.pdf", t=BENCHMARK_UNITS),
		"figures/coreSizes.pdf",
		"tables/coreKmerFractions.tsv",
		expand("figures/{t}VarDelta.pdf", t=BENCHMARK_UNITS),
		"results/geneComparison_CorerVsSibeliaZ.txt",
		"results/geneComparison_assemblyVsReadGraph.txt",
		"results/buscoGeneComparison.txt",
		"arabidopsis/coreSizes/coreSize_assemblyGraph_k21_Core_m18_d60_m18.txt",
		"arabidopsis/coreSizes/coreSize_sibeliazBlocks_k21_m18.txt",
		"arabidopsis/coreSizes/coreSize_assemblyGraphWotSf_k21_m17.txt",
		"arabidopsis/coreSizes/coreSize_assemblyGraphWotSf_k21_Core_m17_d60_m17.txt",
		"arabidopsis/coreSizes/coreSize_readGraph_k21_m17.txt",
		"arabidopsis/coreSizes/coreSize_readGraph_k21_Core_m17_d60_m17.txt"

rule getProteinSeqs:
	input:
		"arabidopsis/annotations/{acc}.gff"
	output:
		"arabidopsis/proteinSequences/{acc}.fasta"
	shell:
		"python3 scripts/extractProteinSeqs.py {input} {output}"

rule runBUSCOanalysis:
	input:
		brasDB = config['BUSCObrasDB'],
		genes = "arabidopsis/proteinSequences/{acc}.fasta"
	output:
		"arabidopsis/buscoAnalysis/run_BUSCO_{acc}/full_table_BUSCO_{acc}.tsv"
	shell:
		"python3 %s -i {input.genes} -o {wildcards.acc} -l {input.brasDB} -m proteins -c 10 -t tmp_{wildcards.acc} -sp arabidopsis" %config['BUSCOscript']

rule compareBuscoGenes:
	input:
		buscoRes = getBuscoResultFiles,
		assemblyRes = getAssemblyGraphBifrostResultFiles,
		readRes = getReadGraphBifrostResultFiles
	output:
		"results/buscoGeneComparison.txt"
	shell:
		"python3 scripts/compareBuscoGenes.py -b {input.buscoRes} -a {input.assemblyRes} -r {input.readRes} > {output}"

rule plotVarDeltaMems:
	input:
		expand("listeriaMonocytogenes/benchmarks/benchmark_assemblyGraph_k17_Core_m250_d{d}.txt", d=config['dlts'] + [100, 120, 140, 160, \
			180, 200, 220, 240])
	output:
		"figures/memoryVarDelta.pdf"
	shell:
		"python3 scripts/plotVarDeltaMems.py -o {output} {input}"

rule plotVarDeltaRuntimes:
	input:
		expand("listeriaMonocytogenes/benchmarks/benchmark_assemblyGraph_k17_Core_m250_d{d}.txt", d=config['dlts'] + [100, 120, 140, 160, \
			180, 200, 220, 240])
	output:
		"figures/runtimesVarDelta.pdf"
	shell:
		"python3 scripts/plotVarDeltaRuntimes.py -o {output} {input}"

rule createKmerFractionTable:
	input:
		getCoreSizeFiles
	output:
		"tables/coreKmerFractions.tsv"
	shell:
		"python3 scripts/plotKmerFractionTable.py {input} > {output}"

rule countCoreKmers:
	input:
		expand("{s}/graphs/{g}.{gFSuf}", s='{sp}', g='{gtype}', gFSuf=config['gFileSuffixes'])
	params:
		"{qrm}"
	output:
		"{sp}/coreSizes/coreSize_{gtype}_m{qrm}.txt"
	shell:
		"scripts/CountCoreKmers $(echo {input} | cut -d'.' -f1) {params}"

rule measureCore:
	input:
		expand("{s}/graphs/assemblyGraph_k17_Core_m{m}_d{d}.{gFSuf}", s='{sp}', m='{qrm}', d='{dlt}', gFSuf=config['gFileSuffixes'])
	params:
		"{qrm}"
	output:
		"{sp}/coreSizes/coreSize_assemblyGraph_k17_Core_m{qrm}_d{dlt}.txt"
	shell:
		"scripts/CountCoreKmers $(echo {input} | cut -d'.' -f1) {params}"

rule plotCoreSizes:
	input:
		expand("listeriaMonocytogenes/coreSizes/coreSize_assemblyGraph_k17_Core_m250_d{d}.txt", d=config['dlts'] + [100, 120, 140, 160, \
			180, 200, 220, 240])
	output:
		"figures/coreSizes.pdf"
	shell:
		"python3 scripts/plotCoreSizes.py {input}"

rule plotMemUsage:
	input:
		corermems = getCorerBenchmarks,
		panaroomems = expand("{s}/panarooRes/benchmark.txt", s=config['prokaryotes']),
		sibeliamems = expand("{s}/sibeliaz/assemblyGraph/benchmark.txt", s=config['prokaryotes'])
	output:
		"figures/memoryVarDatasets.pdf"
	shell:
		"python3 scripts/plotMemUsage.py -c {input.corermems} -p {input.panaroomems} -s {input.sibeliamems} -o {output}"

rule plotRuntimes:
	input:
		corertimes = getCorerBenchmarks,
		panarootimes = expand("{s}/panarooRes/benchmark.txt", s=config['prokaryotes']),
		sibeliatimes = expand("{s}/sibeliaz/assemblyGraph/benchmark.txt", s=config['prokaryotes'])
	output:
		"figures/runtimesVarDatasets.pdf"
	shell:
		"python3 scripts/plotRuntimes.py -c {input.corertimes} -p {input.panarootimes} -s {input.sibeliatimes} -o {output}"

rule extractSibeliaZblocks:
	input:
		coords = "{sp}/sibeliaz/{gtype}/blocks_coords.gff",
		seqs = getAssemblies
	params:
		"{qrm}"
	output:
		"{sp}/blastdb/blockSequences_{gtype}_m{qrm}.fasta"
	shell:
		"python3 scripts/getSibeliaZblocks.py -q {params} -o {output} {input.coords} {input.seqs}"

rule mkBLASTdb:
	input:
		"{sp}/blastdb/blockSequences_{gtype}_m{qrm}.fasta"
	output:
		temp(expand("{s}/blastdb/blockSequences_{g}_m{m}.fasta.{f}", s="{sp}", g='{gtype}', m="{qrm}", f=config['BLASTdatabaseFileSuffixes']))
	shell:
		"%s -in {input} -dbtype nucl" %config['makeblastdb_bin']

rule runBLAST:
	input:
		qry = "{sp}/genes/{acc}.fasta",
		dbBs = "{sp}/blastdb/blockSequences_{gtype}_m{qrm}.fasta",
		dbPts = expand("{s}/blastdb/blockSequences_{g}_m{m}.fasta.{f}", s="{sp}", g='{gtype}', m='{qrm}', f=config['BLASTdatabaseFileSuffixes'])
	output:
		"{sp}/blastRes/results_{gtype}_m{qrm}_q{acc}.txt"
	shell:
		"%s/blastn -query {input.qry} -db {input.dbBs} > {output}" %config['blastn_bin']

rule checkBLASTresultCoverages:
	input:
		"{sp}/blastRes/results_{gtype}_m{qrm}_q{acc}.txt"
	output:
		"{sp}/geneCoverages/coverage_{gtype}_m{qrm}_q{acc}.txt"
	shell:
		"python3 scripts/checkBLASTresCovs.py {input} > {output}"

rule getGeneSeqs:
	input:
		assembly = getGenomeSeq,
		preds = "{sp}/annotations/{acc}.gff"
	output:
		"{sp}/genes/{acc}.fasta"
	shell:
		"python3 scripts/getGeneSeqs.py -a {input.assembly} -p {input.preds} -o {output}"

rule compareAssemblyAndReadGraphGenes:
	input:
		assemblyRes = getAssemblyGraphBifrostResultFiles,
		readRes = getReadGraphBifrostResultFiles
	output:
		"results/geneComparison_assemblyVsReadGraph.txt"
	shell:
		"python3 scripts/compareAssemblyAndReadGraphGenes.py -a {input.assemblyRes} -r {input.readRes} > {output}"

rule compareCoreGenes:
	input:
		corerRes = getArabidopsisBifrostResultFiles,
		sibeliaRes = getArabidopsisGeneCovs
	output:
		"results/geneComparison_CorerVsSibeliaZ.txt"
	shell:
		"python3 scripts/compareCoreGenes.py -c {input.corerRes} -s {input.sibeliaRes} > {output}"

rule queryCore:
	input:
		grph = expand("{s}/graphs/{g}_k{k}_Core_m{m}_d60.{gFSuf}", s='{sp}', g='{gtype}', k='{k}', m='{qrm}', gFSuf=config['gFileSuffixes']),
		qry = "{sp}/genes/{acc}.fasta"
	params:
		'{wildcards.thres}'
	output:
		"{sp}/bifrostRes/qRes_{gtype}_k{k}_Core_m{qrm}_d60_t{thres}_q{acc}.tsv"
	threads:
		config['bifrostCores']
	shell:
		"%s query -g {input.grph} -q {input.qry} -o $(echo {output} | sed 's/.tsv//g') -e {params} -t {threads} -n -v" %config['bifrost_bin']

rule createResultTable:
	input:
		bifRes = getBifrostResultFiles,
		panRes = expand("{s}/panarooRes/gene_presence_absence.csv", s=config['prokaryotes']),
		covs = getGeneCovs
	params:
		relQrm = "{wildcards.relQrm}",
		covThres = "{wildcards.covThres}"
	output:
		"tables/toolComparison_qrm{relQrm}_t{covThres}.tsv"
	shell:
		"python3 scripts/plotResTable.py -b {input.bifRes} -p {input.panRes} -s {input.covs} -q {params.relQrm} -t {params.covThres}" + \
		" > {output}"

rule annotateGenome:
	input:
		"{sp}/genomeSequences/{genomeId}.fasta"
	output:
		expand("{sp}/annotations/{genomeId}.{suf}", sp="{sp}", genomeId="{genomeId}", suf=config['prokkaOutputFileSuffixes'])
	threads:
		workflow.cores
	wildcard_constraints:
		genomeId="[N,C,L,H,A]+.*"
	shell:
		"%s --force --outdir {wildcards.sp}/annotations --prefix {wildcards.genomeId} --cpus {threads} {input}" %config['prokka_bin']

rule annotatePlantGenome:
	input:
		"{sp}/genomeSequences/{genomeId}.fas"
	output:
		"{sp}/annotations/{genomeId}.gff"
	shell:
		"%s --species=arabidopsis {input} > {output}" %config['augustus_bin']

rule calculateCore:
	input:
		expand("{sp}/graphs/{t}_k{k}.{suf}", sp='{sp}', t='{gtype}', k='{k}', suf=config['gFileSuffixes'])
	params:
		qrm = "{qrm}",
		dlt = "{dlt}"
	output:
		grph = expand("{sp}/graphs/{t}_k{k}_Core_m{qrm}_d{dlt}.{gFSuf}", sp='{sp}', t='{gtype}', k='{k}', qrm='{qrm}', dlt='{dlt}', \
			gFSuf=config['gFileSuffixes']),
		bnchmrk = "{sp}/benchmarks/benchmark_{gtype}_k{k}_Core_m{qrm}_d{dlt}.txt"
	shell:
		" /usr/bin/time -v %s -q {params.qrm} -d {params.dlt} -i $(echo {input} | cut -d'.' -f1) " %config['corer_bin'] +
		"-o $(echo {output.grph} | cut -d'.' -f1) 2> {output.bnchmrk}"

rule buildPangenomeGraph:
	input:
		"{sp}/{gtype}PangenomeList.txt"
	threads:
		8
	output:
		expand("{sp}/graphs/{g}_k{k}.{gFSuf}", sp='{sp}', g='{gtype}', k='{k}', gFSuf=config['gFileSuffixes'])
	wildcard_constraints:
		k = "[0-9]+",
		gtype = "[a-z,A-Z]+"
	shell:
		"%s build -r {input} -o $(echo {output} | cut -d'.' -f1) -t {threads} -v -c -k {wildcards.k}" %config['bifrost_bin']

rule createReadGraphList:
	input:
		["arabidopsis/reads/%s.fasta" %basename(l).split('_')[0] for l in open("arabidopsis/genomeSequences/links.txt", 'r') if l.find("sf") < 0]
	output:
		"arabidopsis/readGraphPangenomeList.txt"
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

rule extractGraphSeqs:
	input:
		"arabidopsis/graphs/readGraph_{acc}_k21.gfa"
	output:
		"arabidopsis/reads/{acc}.fasta"
	shell:
		"python3 scripts/extractGFAseqs.py {input} > {output}"

rule buildGenomeGraph:
	input:
		"arabidopsis/{acc}ReadList.txt"
	threads:
		8
	output:
		"arabidopsis/graphs/readGraph_{acc}_k21.gfa"
	shell:
		"%s build -s {input} -o $(echo {output} | cut -d'.' -f1) -t {threads} -v -k 21" %config['bifrost_bin']

rule createReadList:
	input:
		getReadSets
	output:
		"arabidopsis/{acc}ReadList.txt"
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

# rule downloadReadSets:
# 	input:
# 		"arabidopsis/reads/filereport_read_run_PRJEB2457_tsv.txt"
# 	threads:
# 		workflow.cores
# 	output:
# 		["arabidopsis/reads/" + basename(f) for l in open("arabidopsis/reads/filereport_read_run_PRJEB2457_tsv.txt", 'r') for f in l.split('\t')[6].split(';') if f != "fastq_ftp"]
# 	shell:
# 		"wget $(python3 scripts/getReadLocations.py {input}); mv *.fastq.gz arabidopsis/reads"

rule createSibeliaBlockSeqList:
	input:
		"arabidopsis/blastdb/blockSequences_sibeliaz_m18.fasta"
	output:
		temp("arabidopsis/sibeliazBlocksPangenomeList.txt")
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

rule createAssemblyList:
	input:
		getAssemblies
	output:
		temp("{sp}/{gtype}PangenomeList.txt")
	wildcard_constraints:
		gtype="[a,r].[a-z,G,S,W]+"
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

# rule getNCBI_Genomes:
# 	input:
# 		"{sp}/genomeSequences/accessions.txt"
# 	threads:
# 		workflow.cores
# 	output:
# 		"{sp}/genomeSequences/{acc}.fasta"
#	wildcard_constraints:
#		sp="[b,y,e,l]+"
# 	shell:
# 		"python3 scripts/get_fastas_for_acc_list.py {input}"

# rule getArabidopsisGenomes:
# 	input:
# 		"arabidopsis/genomeSequences/links.txt"
# 	threads:
# 		workflow.cores
# 	output:
# 		expand("arabidopsis/genomeSequences/{g}", g=[basename(u.strip()) for u in open("arabidopsis/genomeSequences/links.txt", 'r')])
# 	shell:
# 		"for u in $(cat {input}); do wget $u; done; mv *.fas arabidopsis/genomeSequences"

rule runPanaroo:
	input:
		getGffFiles
	output:
		"{spec}/panarooRes/combined_DNA_CDS.fasta",
		"{spec}/panarooRes/combined_protein_cdhit_out.txt",
		"{spec}/panarooRes/combined_protein_cdhit_out.txt.clstr",
		"{spec}/panarooRes/combined_protein_CDS.fasta",
		"{spec}/panarooRes/final_graph.gml",
		"{spec}/panarooRes/gene_data.csv",
		"{spec}/panarooRes/gene_presence_absence.csv",
		"{spec}/panarooRes/gene_presence_absence_roary.csv",
		"{spec}/panarooRes/gene_presence_absence.Rtab",
		"{spec}/panarooRes/pan_genome_reference.fa",
		"{spec}/panarooRes/pre_filt_graph.gml",
		"{spec}/panarooRes/struct_presence_absence.Rtab",
		"{spec}/panarooRes/summary_statistics.txt",
		"{spec}/panarooRes/benchmark.txt",
	shell:
		"/usr/bin/time -v %s -i {input} -o " %config['panaroo_bin'] + \
		"{wildcards.spec}/panarooRes --clean-mode strict 2> {wildcards.spec}/panarooRes/benchmark.txt"

rule runSibeliaZ:
	input:
		getAssemblies
	output:
		res = "{sp}/sibeliaz/{gtype}/blocks_coords.gff",
		benchmark = "{sp}/sibeliaz/{gtype}/benchmark.txt"
	shell:
		"/usr/bin/time -v %s -n -o {wildcards.sp}/sibeliaz/{wildcards.gtype} " %config['sibeliaz_bin'] + \
		"{input} 2> {output.benchmark}"