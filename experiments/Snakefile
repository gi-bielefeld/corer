configfile: 'config.yaml'

from glob import glob
from os.path import basename

def getAccessionNames(sp):
	accNames = []

	for l in open(glob("%s/genomeSequences/*.txt" %sp)[0], 'r'):
		splittedAccName = basename(l.strip()).split('.')

		if len(splittedAccName) > 1:
			accNames.append('.'.join(splittedAccName[:-1]))
		else:
			accNames.append(splittedAccName[0])

	return accNames

def getGffFiles(sp):
	return ["%s/annotations/%s.gff" %(sp, a) for a in getAccessionNames(sp)]

def getAssemblies(wcs):
	if wcs.sp == "arabidopsis":
		gList = ["%s/genomeSequences/%s.fas" %(wcs.sp, a) for a in getAccessionNames(wcs.sp)]
	else:
		gList = ["%s/genomeSequences/%s.fasta" %(wcs.sp, a) for a in getAccessionNames(wcs.sp)]

	if wcs.gtype.find("wotSf") > -1:
		gList.remove("arabidopsis/genomeSequences/sf_2.v7.PR_in_lowercase.fas")

	return gList

def listGenomes(sp):
	return ["%s/genomeSequences/%s.fasta" %(sp, a.strip()) for a in open("%s/genomeSequences/accessions.txt" %sp, 'r')]

def getReadSets(acc):
	return ["arabidopsis/reads/" + basename(f) for l in open("arabidopsis/reads/filereport_read_run_PRJEB2457_tsv.txt", 'r') if l.find(str(acc).capitalize()) > -1 for f in l.split('\t')[6].split(';')]

rule all:
	input:
		expand("bifidobacteriumAnimalis/graphs/assemblyGraph_k17_Core_m18_d{d}.{gFSuf}", d=config['dlts'], gFSuf=config['gFileSuffixes']),
		expand("bifidobacteriumAnimalis/benchmarks/benchmark_assemblyGraph_k17_Core_m18_d{d}.txt", d=config['dlts']),
		expand("enterococcusFaecium/graphs/assemblyGraph_k17_Core_m146_d{d}.{gFSuf}", d=config['dlts'], gFSuf=config['gFileSuffixes']),
		expand("enterococcusFaecium/benchmarks/benchmark_assemblyGraph_k17_Core_m146_d{d}.txt", d=config['dlts']),
		expand("yersiniaPestis/graphs/assemblyGraph_k17_Core_m46_d{d}.{gFSuf}", d=config['dlts'], gFSuf=config['gFileSuffixes']),
		expand("yersiniaPestis/benchmarks/benchmark_assemblyGraph_k17_Core_m46_d{d}.txt", d=config['dlts']),
		expand("listeriaMonocytogenes/graphs/assemblyGraph_k17_Core_m250_d{d}.{gFSuf}", d=config['dlts'], gFSuf=config['gFileSuffixes']),
		expand("listeriaMonocytogenes/benchmarks/benchmark_assemblyGraph_k17_Core_m250_d{d}.txt", d=config['dlts'] + [100, 120, 140, 160, \
			180, 200, 220, 240]),
		expand("arabidopsis/graphs/assemblyGraph_k21_Core_m18_d60.{gFSuf}", gFSuf=config['gFileSuffixes']),
		"arabidopsis/benchmarks/benchmark_assemblyGraph_k21_Core_m18_d60.txt",
		expand("arabidopsis/graphs/assemblyGraphWotSf_k21_Core_m17_d60.{gFSuf}", gFSuf=config['gFileSuffixes']),
		"arabidopsis/benchmarks/benchmark_assemblyGraphWotSf_k21_Core_m17_d60.txt",
		expand("arabidopsis/graphs/readGraph_k21_Core_m17_d60.{gFSuf}", gFSuf=config['gFileSuffixes']),
		"arabidopsis/benchmarks/benchmark_readGraph_k21_Core_m17_d60.txt",
		expand("{s}/panarooRes/gene_presence_absence.csv", s=config['prokaryotes']),
		expand("{s}/panarooRes/benchmark.txt", s=config['prokaryotes']),
		expand("{s}/sibeliaz/assemblyGraph/blocks_coords.gff", s=config['prokaryotes'] + config['eukaryotes']),
		expand("{s}/sibeliaz/assemblyGraph/benchmark.txt", s=config['prokaryotes'] + config['eukaryotes']),
		"arabidopsis/sibeliaz/assemblyGraphWotSf/blocks_coords.gff",
		"arabidopsis/sibeliaz/assemblyGraphWotSf/benchmark.txt"

rule annotateGenome:
	input:
		"{sp}/genomeSequences/{genomeId}.fasta"
	output:
		expand("{sp}/annotations/{genomeId}.{suf}", sp="{sp}", genomeId="{genomeId}", suf=config['prokkaOutputFileSuffixes'])
	threads:
		workflow.cores
	# wildcard_constraints:
	# 	genomeId="[N,C,L,H,A]+.*"
	shell:
		"mkdir -p {wildcards.sp}/annotations; %s/prokka --force --outdir {wildcards.sp}/annotations --prefix {wildcards.genomeId} --cpus {threads} {input}" %config['prokka_bin']

rule annotatePlantGenome:
	input:
		"{sp}/genomeSequences/{genomeId}.fas"
	output:
		"{sp}/annotations/{genomeId}.gff"
	wildcard_constraints:
		genomeId="[a-z]+"
	shell:
		"mkdir -p {wildcards.sp}/annotations; %s/augustus --species=arabidopsis {input} > {output}" %config['augustus_bin']

rule calculateCore:
	input:
		expand("{sp}/graphs/{t}_k{k}.{suf}", sp='{sp}', t='{gtype}', k='{k}', suf=config['gFileSuffixes'])
	params:
		qrm = "{qrm}",
		dlt = "{dlt}"
	output:
		grph = expand("{sp}/graphs/{t}_k{k}_Core_m{qrm}_d{dlt}.{gFSuf}", sp='{sp}', t='{gtype}', k='{k}', qrm='{qrm}', dlt='{dlt}', \
			gFSuf=config['gFileSuffixes']),
		bnchmrk = "{sp}/benchmarks/benchmark_{gtype}_k{k}_Core_m{qrm}_d{dlt}.txt"
	shell:
		"mkdir -p {wildcards.sp}/benchmarks;" +
		" /usr/bin/time -v %s/Corer -q {params.qrm} -d {params.dlt} -i $(echo {input} | cut -d'.' -f1) " %config['corer_bin_dir'] +
		"-o $(echo {output.grph} | cut -d'.' -f1) 2> {output.bnchmrk}"

rule buildPangenomeGraph:
	input:
		"{sp}/{gtype}PangenomeList.txt"
	threads:
		8
	output:
		expand("{sp}/graphs/{g}_k{k}.{gFSuf}", sp='{sp}', g='{gtype}', k='{k}', gFSuf=config['gFileSuffixes'])
	wildcard_constraints:
		k = "[0-9]+",
		gtype = "[a-z,A-Z]+"
	shell:
		"mkdir -p {wildcards.sp}/graphs; Bifrost build -r {input} -o $(echo {output} | cut -d'.' -f1) -t {threads} -v -c -k {wildcards.k}"

rule createReadGraphList:
	input:
		["arabidopsis/reads/%s.fasta" %basename(l).split('_')[0] for l in open("arabidopsis/genomeSequences/links.txt", 'r') if l.find("sf") < 0]
	output:
		"arabidopsis/readGraphPangenomeList.txt"
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

rule extractGraphSeqs:
	input:
		"arabidopsis/graphs/readGraph_{acc}_k21.gfa"
	output:
		"arabidopsis/reads/{acc}.fasta"
	shell:
		"python3 scripts/extractGFAseqs.py {input} > {output}"

rule buildGenomeGraph:
	input:
		"arabidopsis/{acc}ReadList.txt"
	threads:
		8
	output:
		"arabidopsis/graphs/readGraph_{acc}_k21.gfa"
	shell:
		"mkdir -p arabidopsis/graphs; Bifrost build -s {input} -o $(echo {output} | cut -d'.' -f1) -t {threads} -v -k 21"

rule createReadList:
	input:
		getReadSets
	output:
		"arabidopsis/{acc}ReadList.txt"
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

rule downloadReadSets:
	input:
		"arabidopsis/reads/filereport_read_run_PRJEB2457_tsv.txt"
	output:
		["arabidopsis/reads/" + basename(f) for l in open("arabidopsis/reads/filereport_read_run_PRJEB2457_tsv.txt", 'r') for f in l.split('\t')[6].split(';')]
	shell:
		"wget {input}; mv *.fastq.gz arabidopsis/reads"

rule createAssemblyList:
	input:
		getAssemblies
	output:
		temp("{sp}/{gtype}PangenomeList.txt")
	# wildcard_constraints:
	# 	gtype="[a-z,A,P,F,M]+"
	shell:
		"ls -l {input} | tr -s ' ' | cut -d' ' -f9 > {output}"

rule getNCBI_Genomes:
	input:
		"{sp}/genomeSequences/accessions.txt"
	output:
		"{sp}/genomeSequences/{acc}.fasta"
	shell:
		"python3 script/get_fastas_for_acc_list.py {input}"

rule getArabidopsisGenomes:
	input:
		"arabidopsis/genomeSequences/links.txt"
	output:
		expand("arabidopsis/genomeSequences/{g}", g=[basename(u.strip()) for u in open("arabidopsis/genomeSequences/links.txt", 'r')])
	shell:
		"for u in $(cat {input}); do wget $u; done; mv *.fas arabidopsis/genomeSequences"

rule runPanaroo:
	input:
		getGffFiles
	output:
		"{spec}/panarooRes/combined_DNA_CDS.fasta",
		"{spec}/panarooRes/combined_protein_cdhit_out.txt",
		"{spec}/panarooRes/combined_protein_cdhit_out.txt.clstr",
		"{spec}/panarooRes/combined_protein_CDS.fasta",
		"{spec}/panarooRes/final_graph.gml",
		"{spec}/panarooRes/gene_data.csv",
		"{spec}/panarooRes/gene_presence_absence.csv",
		"{spec}/panarooRes/gene_presence_absence_roary.csv",
		"{spec}/panarooRes/gene_presence_absence.Rtab",
		"{spec}/panarooRes/pan_genome_reference.fa",
		"{spec}/panarooRes/pre_filt_graph.gml",
		"{spec}/panarooRes/struct_presence_absence.Rtab",
		"{spec}/panarooRes/summary_statistics.txt",
		"{spec}/panarooRes/benchmark.txt",
	shell:
		"mkdir -p {wildcards.spec}/panarooRes; /usr/bin/time -v %s/panaroo -i {input} -o " %config['panaroo_bin'] + \
		"{wildcards.spec}/panarooRes --clean-mode strict 2> {wildcards.spec}/panarooRes/benchmark.txt"

rule runSibeliaZ:
	input:
		getAssemblies
	output:
		res = "{sp}/sibeliaz/{gtype}/blocks_coords.gff",
		benchmark = "{sp}/sibeliaz/{gtype}/benchmark.txt"
	shell:
		"mkdir -p {wildcards.sp}/sibeliaz {wildcards.sp}/sibeliaz/{wildcards.gtype}; /usr/bin/time -v %s/sibeliaz -n -o {wildcards.sp}/sibeliaz/{wildcards.gtype} " %config['sibeliaz_bin'] + \
		"{input} 2> {output.benchmark}"